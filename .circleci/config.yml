version: 2.1
workflows:
  my-workflows: # tên workflow
    jobs:
      - checkout_code
      - build:
          requires:
            - checkout_code # để job build có thể truy xuất tới file job checkout_code
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test

jobs: # define các job
  checkout_code: # tên job
    working_directory: ~/project # define thư mục để chạy các step
    parallelism: 2 # chạy song song nhiều step trong job
    executor:
      name: build_test
    steps:
      - checkout
      - persist_to_workspace: # để duy trì 1 file tạm thời để sử dụng cho job kế tiếp trong workflow
          root: . # path đến file tạm thời
          paths: # chọn các file tạm thời
            - ./*
  build:
    executor:
      name: build_test
    steps:
      - attach_workspace: # đính kèm các file trong job checkout_code
          at: .
      - run:
          name: Configure PHP env
          command: cp .env.example .env
      - chmod_777
      - composer_install
      - persist_to_workspace: 
          root: .
          paths:
            - ./*
  test:
    executor:
      name: build_test
    steps:
      - attach_workspace:
          at: .
      - run:
          name: phpcs # kiểm tra code chuẩn theo PSR1
          command: |
            vendor/bin/phpcs --standard=PSR1 app 
            vendor/bin/phpcs --standard=PSR1 resources 
          when: always # chạy bất kể trạng thái thoát của step trước đó
  deploy:
    executor:
      name: gce_deploy
    steps:
      - attach_workspace:
          at: .
      - authorize_gcp
      - select_gke_cluster
      - deploy_kubernetes

executors: # define các môi trường để job chạy
  build_test:
    docker:
      - image: cimg/php:7.4.26
  gce_deploy:
    docker:
      - image: google/cloud-sdk

commands: # define các command
  chmod_777:
    steps:
      - run:
          name: chmod 777 (directory permission adjustment)
          command: | # cách để chạy multi command trong 1 step
            chmod 777 -R storage
            chmod 777 -R bootstrap/cache
  composer_install:
    steps:
      - restore_cache: # phục hồi lại bộ nhớ đệm đã lưu trước đó thông qua key
          name: Restore composer cache
          keys:
            - composer-cache-v1-{{ .Branch }}-{{ checksum "composer.lock" }}
      - run:
          name: Composer install
          command: composer install -n --prefer-dist
      - save_cache: # tạo và lưu bộ nhớ đệm 1 file hoặc thư mục hoặc source code
          name: Save composer cache
          key: composer-cache-v1-{{ .Branch }}-{{ checksum "composer.lock" }}
          paths:
            - ./vendor
      - run:
          name: Clear laravel config
          command: php artisan config:clear
      - run:
          name: Generate key
          command: php artisan key:generate
  authorize_gcp:  
    steps:
      - run:
          name: Google Authentication
          command: |
            echo $JSON_KEY_FILE > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://asia.gcr.io
  select_gke_cluster:
   steps:
     - run:
         name: Select GKE Cluster
         command: |
            gcloud config set core/project kubernate-circle-ci
            gcloud config set container/cluster k8s-demo
            gcloud container clusters get-credentials k8s-demo --zone asia-east2-a --project kubernate-circle-ci
  deploy_kubernetes:
   steps:
     - run:
         name: Deploy to Kubernetes
         command: |
            envsubst < yaml_files/deployment.yaml > ./deployment.yaml
            envsubst < yaml_files/pdb-laravel-circleci.yaml > ./svc.yaml
            envsubst < yaml_files/svc-laravel-circleci.yaml > ./pdb.yaml
            kubectl apply -f ./deployment.yaml
            kubectl apply -f ./svc.yaml
            kubectl apply -f ./pdb.yaml
            kubectl rollout status deployment kubernate-circle-ci
      